package com.Byteforce.Service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.Byteforce.DAO.AccountantDao;
import com.Byteforce.DAO.CashierDao;
import com.Byteforce.DTO.Accountant;
import com.Byteforce.DTO.Cashier;
import com.Byteforce.Responce.ResponseStructure;

import jakarta.servlet.http.HttpSession;

@Service
public class CashierService {

	@Autowired
	CashierDao dao;
	
	@Autowired
	HttpSession session;
	
	@Autowired
	ResponseStructure<Cashier> structure;
	
	public ResponseStructure<Cashier> saveCashierService(Cashier cashier) {
		if (session.getAttribute("propritor") != null) {
			Cashier cashier2 = dao.saveCashierDao(cashier);
			if (cashier2 != null) {
				structure.setStatus(HttpStatus.OK.value());
				structure.setMsg("Cashier saved Succefully !!");
			} else {
				structure.setStatus(HttpStatus.NOT_ACCEPTABLE.value());
				structure.setMsg("Cashier not saved Succefully !!");
			}
			structure.setData(cashier2);
		} else {
			structure.setStatus(HttpStatus.BAD_REQUEST.value());
			structure.setMsg("Propritor not login,  login first !!");
			structure.setData(null);
		}
		return structure; 
	}
	
	public ResponseStructure<Cashier> findCashierByIdService(int id) {
		if (session.getAttribute("propritor") != null) {
			Cashier cashier = dao.findById(id);
			if (cashier != null) {
				structure.setStatus(HttpStatus.FOUND.value());
				structure.setMsg("Cashier found Succefully !!");
			} else {
				structure.setStatus(HttpStatus.NOT_FOUND.value());
				structure.setMsg("Cashier not saved Succefully !!");
			}
			structure.setData(cashier);
		} else {
			structure.setStatus(HttpStatus.BAD_REQUEST.value());
			structure.setMsg("Propritor not login,  login first !!");
			structure.setData(null);
		}
		return structure;
	}
	
	public ResponseStructure<Accountant> updateFirmService(Accountant accountant) {

		if (session.getAttribute("propritor") != null) {
			if (accountant != null) {
				Accountant accountant2 = findAccountantByIdService(accountant.getId()).getData();
				if (accountant2 != null) {
					dao.saveAccountantDao(accountant);
					structure.setStatus(HttpStatus.OK.value());
					structure.setMsg("Accountant update Succefully !!");
				} else {
					structure.setStatus(HttpStatus.NOT_ACCEPTABLE.value());
					structure.setMsg("This Accountant not exists !!");
				}
				structure.setData(accountant);
			} else {
				structure.setStatus(HttpStatus.NOT_ACCEPTABLE.value());
				structure.setMsg("Null Accountant can't not update !!");
				structure.setData(null);
			}
		} else {
			structure.setStatus(HttpStatus.BAD_REQUEST.value());
			structure.setMsg("Propritor not login,  login first !!");
			structure.setData(null);
		}
		return structure;
	}
	
	public ResponseStructure<Accountant> loginPropritorService(String email, String password) {
		List<Accountant> accountants =  dao.findAccountantByEmailDao(email);
		if (!accountants.isEmpty()) {
			for (Accountant accountant : accountants) {
				if (accountant.getPassword().equals(password) && accountant.getEmail().equals(email)) {
					structure.setStatus(HttpStatus.ACCEPTED.value());
					structure.setMsg("Propritor login succesfully !!");
					structure.setData(accountant);
					return structure;
				} else {
					structure.setStatus(HttpStatus.NOT_ACCEPTABLE.value());
					structure.setMsg("Propritor login Failed wrong Password !!");
				}
				structure.setData(accountant);
				return structure;
			}
		} else {
			structure.setStatus(HttpStatus.NOT_FOUND.value());
			structure.setMsg("Propritor not found wrong Id !!");
		}
		structure.setData(null);
		return structure;
	}
}
